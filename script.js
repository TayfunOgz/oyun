let socket;
try {
    socket = io("http://localhost:5000", { reconnection: true, reconnectionAttempts: 5 });
    
    socket.on('connect', () => {
        console.log('Connected to server successfully');
    });
    
    socket.on('connect_error', (error) => {
        console.error('Socket.IO connection error:', error);
        showResult("Sunucu baÄŸlantÄ± hatasÄ±. LÃ¼tfen sunucunun Ã§alÄ±ÅŸtÄ±ÄŸÄ±ndan emin olun.", "error");
    });
} catch (error) {
    console.error('Socket.IO initialization error:', error);
}

const words = [
    { word: "elma", hint: "KÄ±rmÄ±zÄ±, yeÅŸil veya sarÄ± olabilir." },
    { word: "bilgisayar", hint: "Ä°ÅŸ yapmanÄ±za, oyun oynamanÄ±za yardÄ±mcÄ± olur." },
    { word: "istanbul", hint: "1453'te fethedilen ÅŸehir." },
    { word: "telefon", hint: "GÃ¼nlÃ¼k iletiÅŸim iÃ§in kullanÄ±lÄ±r." },
    { word: "cumhuriyet", hint: "1923'te TÃ¼rkiye'de kurulan yÃ¶netim ÅŸekli." },
    { word: "kitap", hint: "Bilgi dolu sayfalardan oluÅŸur, okumayÄ± sevenlerin vazgeÃ§ilmezi." },
    { word: "gÃ¼neÅŸ", hint: "DÃ¼nyamÄ±zÄ± Ä±sÄ±tan ve aydÄ±nlatan gÃ¶k cismi." },
    { word: "kelebek", hint: "Renkli kanatlarÄ± olan ve kÄ±sa Ã¶mÃ¼rlÃ¼ uÃ§an canlÄ±." },
    { word: "ÅŸehir", hint: "Ä°nsanlarÄ±n yaÅŸadÄ±ÄŸÄ± bÃ¼yÃ¼k yerleÅŸim bÃ¶lgesi." },
    { word: "kalem", hint: "YazÄ± yazmak iÃ§in kullanÄ±lan araÃ§." },
    { word: "uÃ§ak", hint: "Havada yolculuk yapmaya yarayan taÅŸÄ±t." },
    { word: "Ã§ikolata", hint: "TatlÄ± ve kakao iÃ§eren sevilen yiyecek." },
    { word: "deniz", hint: "BÃ¼yÃ¼k su kÃ¼tlesi, yÃ¼zmek iÃ§in harika!" },
    { word: "fil", hint: "DÃ¼nyadaki en bÃ¼yÃ¼k kara hayvanÄ±." },
    { word: "Ã§ay", hint: "Genellikle sÄ±cak iÃ§ilir, kahvaltÄ±nÄ±n vazgeÃ§ilmezi." },
    { word: "kamera", hint: "FotoÄŸraf ve video Ã§ekmeye yarayan cihaz." },
    { word: "radyo", hint: "Sesli yayÄ±nlar yapan iletiÅŸim aracÄ±." },
    { word: "araba", hint: "Kara yolunda kullanÄ±lan motorlu taÅŸÄ±t." },
    { word: "tren", hint: "Raylar Ã¼zerinde giden uzun ve hÄ±zlÄ± ulaÅŸÄ±m aracÄ±." },
    { word: "gezegen", hint: "GÃ¼neÅŸ sistemindeki bÃ¼yÃ¼k gÃ¶k cisimleri." },
    { word: "kÃ¶prÃ¼", hint: "Ä°ki yeri birbirine baÄŸlayan yapÄ±." },
    { word: "balÄ±k", hint: "Suda yaÅŸayan yÃ¼zgeÃ§li canlÄ±." },
    { word: "televizyon", hint: "Film, haber ve program izlemek iÃ§in kullanÄ±lan cihaz." },
    { word: "Ã§iftlik", hint: "HayvanlarÄ±n yetiÅŸtirildiÄŸi ve Ã¼rÃ¼nlerin Ã¼retildiÄŸi yer." },
    { word: "asteroit", hint: "Uzayda dolaÅŸan kÃ¼Ã§Ã¼k kayalÄ±k gÃ¶k cismi." },
    { word: "robot", hint: "Hareket edebilen yapay mekanik cihaz." },
    { word: "parfÃ¼m", hint: "GÃ¼zel kokular iÃ§erir, insanlar tarafÄ±ndan kullanÄ±lÄ±r." },
    { word: "elbise", hint: "Giyilen kumaÅŸ parÃ§asÄ±, moda dÃ¼nyasÄ±nÄ±n bir parÃ§asÄ±." },
    { word: "harita", hint: "Yerlerin Ã§izimle gÃ¶sterildiÄŸi gÃ¶rsel belge." },
    { word: "futbol", hint: "PopÃ¼ler spor, 11 oyuncu ile oynanÄ±r." }
];

let currentIndex = 0;
let score = 0;
let generalTimeLeft = 420;
let generalTimerInterval;
let revealedLetters = [];
let maxHints = 5;
let hintsUsed = 0;
let playerName = "";

function startGame() {
    playerName = document.getElementById("playerName").value.trim();
    if (!playerName) {
        showResult("LÃ¼tfen adÄ±nÄ±zÄ± girin!", "error");
        return;
    }
    console.log("Oyun baÅŸlÄ±yor, oyuncu adÄ±:", playerName);
    document.getElementById("startScreen").style.display = "none";
    document.getElementById("gameScreen").style.display = "block";
    startGeneralTimer();
    displayHint();
    socket.emit("join_game", playerName);
}

function startGeneralTimer() {
    clearInterval(generalTimerInterval);
    document.getElementById("generalTimer").innerText = `Genel SÃ¼re: ${generalTimeLeft} saniye`;

    generalTimerInterval = setInterval(() => {
        generalTimeLeft--;
        document.getElementById("generalTimer").innerText = `Genel SÃ¼re: ${generalTimeLeft} saniye`;

        if (generalTimeLeft <= 0) {
            clearInterval(generalTimerInterval);
            endGame();
        }
    }, 1000);
}

function displayHint() {
    if (currentIndex < words.length) {
        document.getElementById("hint").innerText = words[currentIndex].hint;
    } else {
        showResult("Tebrikler! Oyunu tamamladÄ±nÄ±z ðŸŽ‰", "success");
        endGame();
    }
}

function checkGuess() {
    if (currentIndex >= words.length) return;

    const userGuess = document.getElementById("guessInput").value.trim().toLowerCase();
    const resultEl = document.getElementById("result");

    if (userGuess === words[currentIndex].word) {
        let points = 5 - hintsUsed;
        if (points < 1) points = 1;
        score += points;

        showResult(`DoÄŸru tahmin! ðŸŽ‰ PuanÄ±nÄ±z: ${score}`, "success");
        document.getElementById("score").innerText = `Toplam Puan: ${score}`;

        currentIndex++;
        revealedLetters = [];
        hintsUsed = 0;

        setTimeout(() => {
            document.getElementById("guessInput").value = "";
            resultEl.innerText = "";
            resultEl.className = "";
            displayHint();
        }, 1000);

        sendScoreToServer();
    } else {
        showResult("YanlÄ±ÅŸ tahmin, tekrar deneyin!", "error");
    }
}

function passWord() {
    currentIndex++;
    revealedLetters = [];
    hintsUsed = 0;
    document.getElementById("guessInput").value = "";
    document.getElementById("result").innerText = "";
    document.getElementById("result").className = "";
    displayHint();
}

function revealLetter() {
    if (hintsUsed >= maxHints) {
        showResult("Maksimum harf aÃ§ma hakkÄ±na ulaÅŸtÄ±nÄ±z!", "error");
        return;
    }

    const currentWord = words[currentIndex].word;
    let randomIndex;
    do {
        randomIndex = Math.floor(Math.random() * currentWord.length);
    } while (revealedLetters.includes(randomIndex));

    revealedLetters.push(randomIndex);
    hintsUsed++;

    const displayedWord = currentWord
        .split("")
        .map((letter, index) => (revealedLetters.includes(index) ? letter : "_"))
        .join(" ");

    document.getElementById("hint").innerText = `${words[currentIndex].hint} | Harf: ${displayedWord}`;
}

function endGame() {
    showResult("Oyun bitti! ðŸŽ‰", "success");
    clearInterval(generalTimerInterval);
    document.getElementById("gameScreen").style.display = "none";
    document.getElementById("startScreen").style.display = "block";

    currentIndex = 0;
    score = 0;
    generalTimeLeft = 420;
    revealedLetters = [];
    hintsUsed = 0;
    document.getElementById("guessInput").value = "";
    document.getElementById("result").innerText = "";
    document.getElementById("result").className = "";
    document.getElementById("generalTimer").innerText = "";
    document.getElementById("hint").innerText = "";
    document.getElementById("score").innerText = "";
}

function restartGame() {
    endGame();
    startGame();
}

function showResult(message, type) {
    const resultEl = document.getElementById("result");
    resultEl.innerText = message;
    resultEl.className = type;
}

function sendScoreToServer() {
    console.log("Skor gÃ¶nderiliyor:", { player_name: playerName, score: score });
    
    try {
        const localScores = JSON.parse(localStorage.getItem('wordGameScores') || '[]');
        const existingScoreIndex = localScores.findIndex(item => item.player_name === playerName);
        
        if (existingScoreIndex >= 0) {
            if (localScores[existingScoreIndex].score < score) {
                localScores[existingScoreIndex].score = score;
            }
        } else {
            localScores.push({ player_name: playerName, score: score });
        }
        
        localStorage.setItem('wordGameScores', JSON.stringify(localScores));
        console.log("Skor yerel olarak kaydedildi");
    } catch (e) {
        console.error("Yerel depolama hatasÄ±:", e);
    }
    
    fetch("http://localhost:5000/add_score", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ player_name: playerName, score: score }),
        timeout: 5000 
    })
    .then((response) => {
        console.log("Backend yanÄ±tÄ±:", response.status);
        if (!response.ok) {
            throw new Error(`Skor gÃ¶nderilemedi (Durum kodu: ${response.status})`);
        }
        showResult("Skorunuz kaydedildi!", "success");
    })
    .catch((error) => {
        console.error("Sunucu hatasÄ±:", error);
        showResult("Skorunuz yerel olarak kaydedildi. Sunucu baÄŸlantÄ±sÄ± saÄŸlandÄ±ÄŸÄ±nda otomatik olarak gÃ¶nderilecek.", "success");
    });
}
